using Bussiness;
using log4net;
using SqlDataProvider.Data;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Threading;
namespace Game.Logic
{
    public class WindMgr
    {
        private static readonly ILog log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
        private static readonly int[] CategoryID = new int[]
		{
			1001,
			1002,
			1003,
			1004,
			1005,
			1005,
			1007,
			1008,
			1009
		};
        private static readonly int[] WindID = new int[]
		{
			0,
			1,
			2,
			3,
			4,
			5,
			6,
			7,
			8,
			9,
			10
		};
        private static readonly string[] fontWind = new string[]
		{
			"â€¢",
			"1",
			"2",
			"3",
			"4",
			"5",
			"6",
			"7",
			"8",
			"9",
			"0"
		};
        private static readonly Color[] c = new Color[]
		{
			Color.Yellow,
			Color.Red,
			Color.Blue,
			Color.Green,
			Color.Orange,
			Color.Aqua,
			Color.DarkCyan,
			Color.Purple
		};
        private static readonly string[] font = new string[]
        {
            "Verdana",
            "Comic Sans MS",
            "Tahoma"
        };

        private static Dictionary<int, WindInfo> _winds;
        private static ReaderWriterLock m_lock;
        private static ThreadSafeRandom rand;

        private static readonly byte[] so1 = { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 16, 0, 0, 0, 26, 8, 6, 0, 0, 0, 190, 104, 220, 7, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 32, 99, 72, 82, 77, 0, 0, 122, 38, 0, 0, 128, 132, 0, 0, 250, 0, 0, 0, 128, 232, 0, 0, 117, 48, 0, 0, 234, 96, 0, 0, 58, 152, 0, 0, 23, 112, 156, 186, 81, 60, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 11, 18, 0, 0, 11, 18, 1, 210, 221, 126, 252, 0, 0, 1, 115, 73, 68, 65, 84, 56, 79, 221, 84, 45, 79, 3, 65, 16, 125, 119, 138, 143, 32, 10, 129, 128, 107, 78, 32, 176, 253, 5, 4, 254, 66, 255, 66, 53, 14, 121, 138, 164, 134, 74, 194, 145, 212, 20, 215, 148, 95, 208, 156, 172, 171, 32, 96, 48, 39, 218, 160, 42, 46, 13, 2, 131, 24, 102, 150, 221, 205, 194, 125, 108, 200, 37, 8, 46, 153, 220, 237, 222, 188, 247, 118, 222, 76, 54, 32, 34, 52, 122, 132, 160, 73, 52, 2, 171, 211, 55, 81, 255, 91, 2, 54, 186, 199, 49, 150, 183, 123, 106, 111, 9, 12, 232, 114, 100, 28, 210, 46, 19, 83, 67, 82, 73, 192, 201, 29, 173, 168, 64, 49, 98, 90, 96, 65, 103, 56, 53, 36, 81, 165, 7, 46, 48, 66, 155, 94, 240, 108, 155, 45, 107, 125, 146, 86, 41, 129, 86, 38, 73, 76, 49, 98, 224, 27, 173, 177, 86, 4, 41, 82, 3, 30, 87, 150, 192, 4, 151, 162, 144, 226, 129, 222, 241, 74, 19, 12, 233, 17, 51, 69, 226, 120, 208, 169, 35, 144, 218, 109, 114, 140, 11, 165, 46, 30, 232, 253, 190, 183, 11, 166, 12, 1, 172, 144, 41, 15, 52, 56, 251, 57, 120, 165, 93, 224, 228, 68, 0, 19, 220, 42, 15, 28, 227, 186, 94, 2, 6, 70, 166, 4, 241, 64, 188, 208, 107, 107, 92, 109, 9, 174, 250, 7, 86, 174, 186, 53, 174, 146, 160, 168, 62, 170, 85, 55, 119, 73, 75, 155, 38, 238, 247, 191, 106, 31, 170, 218, 219, 56, 180, 163, 171, 135, 235, 188, 224, 129, 158, 243, 156, 223, 243, 237, 112, 51, 191, 193, 128, 114, 44, 105, 137, 39, 186, 198, 21, 157, 4, 199, 116, 20, 30, 200, 127, 21, 101, 4, 115, 86, 202, 216, 176, 68, 6, 102, 134, 105, 33, 238, 131, 59, 218, 15, 119, 133, 128, 241, 223, 111, 48, 222, 67, 111, 131, 153, 57, 36, 137, 118, 194, 45, 27, 178, 103, 58, 178, 23, 182, 228, 59, 241, 182, 241, 183, 55, 148, 247, 62, 240, 17, 254, 3, 130, 79, 73, 62, 199, 180, 12, 213, 167, 228, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 };
        private static readonly byte[] so4 = { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 18, 0, 0, 0, 26, 8, 6, 0, 0, 0, 186, 157, 12, 58, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 32, 99, 72, 82, 77, 0, 0, 122, 38, 0, 0, 128, 132, 0, 0, 250, 0, 0, 0, 128, 232, 0, 0, 117, 48, 0, 0, 234, 96, 0, 0, 58, 152, 0, 0, 23, 112, 156, 186, 81, 60, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 10, 240, 0, 0, 10, 240, 1, 66, 172, 52, 152, 0, 0, 1, 200, 73, 68, 65, 84, 72, 75, 237, 149, 49, 72, 2, 81, 24, 199, 19, 68, 176, 69, 50, 104, 113, 8, 5, 167, 160, 134, 198, 160, 65, 170, 65, 154, 194, 182, 150, 134, 14, 34, 200, 32, 163, 114, 43, 8, 4, 139, 150, 8, 26, 140, 144, 28, 58, 27, 34, 161, 132, 176, 73, 40, 66, 65, 108, 104, 146, 134, 80, 26, 210, 192, 161, 220, 190, 222, 255, 241, 222, 161, 101, 119, 10, 71, 83, 7, 31, 231, 193, 189, 223, 253, 191, 255, 255, 123, 79, 11, 17, 245, 152, 114, 1, 100, 70, 153, 2, 225, 93, 153, 161, 230, 239, 65, 44, 12, 133, 213, 13, 43, 36, 147, 99, 53, 250, 189, 19, 195, 214, 216, 162, 9, 86, 37, 1, 1, 8, 133, 231, 190, 102, 152, 46, 136, 189, 236, 145, 74, 146, 241, 85, 170, 87, 50, 116, 118, 176, 72, 142, 94, 27, 96, 74, 55, 160, 35, 40, 216, 92, 155, 166, 183, 114, 154, 173, 123, 162, 203, 120, 136, 108, 86, 75, 231, 32, 6, 88, 7, 196, 239, 31, 162, 151, 210, 5, 81, 35, 207, 235, 100, 127, 94, 182, 55, 107, 168, 72, 250, 226, 118, 247, 83, 177, 120, 76, 229, 202, 21, 135, 53, 222, 179, 20, 13, 207, 0, 84, 195, 59, 186, 32, 152, 136, 100, 32, 95, 77, 134, 232, 227, 243, 158, 18, 167, 65, 202, 102, 162, 28, 180, 161, 248, 218, 38, 247, 195, 108, 6, 137, 160, 165, 5, 101, 156, 67, 10, 133, 24, 185, 92, 14, 122, 204, 199, 56, 40, 48, 53, 12, 16, 70, 193, 243, 171, 34, 49, 47, 144, 205, 219, 65, 121, 189, 3, 132, 22, 241, 27, 134, 139, 248, 85, 221, 57, 146, 81, 223, 61, 28, 106, 16, 44, 68, 220, 80, 247, 250, 156, 146, 32, 124, 44, 210, 86, 17, 166, 21, 222, 44, 173, 248, 168, 94, 207, 241, 168, 171, 213, 91, 94, 80, 35, 83, 3, 76, 248, 132, 161, 212, 38, 92, 243, 72, 152, 172, 162, 141, 229, 224, 36, 237, 108, 5, 104, 119, 111, 142, 223, 97, 52, 64, 240, 9, 169, 141, 141, 12, 202, 228, 52, 159, 90, 204, 22, 147, 204, 135, 176, 185, 0, 4, 40, 117, 30, 38, 187, 221, 42, 183, 136, 254, 28, 9, 101, 216, 26, 40, 108, 214, 90, 250, 122, 155, 183, 10, 117, 226, 3, 221, 109, 90, 1, 203, 57, 157, 118, 222, 14, 238, 98, 24, 91, 162, 239, 232, 60, 18, 48, 85, 0, 144, 86, 75, 75, 50, 57, 195, 99, 164, 211, 19, 244, 31, 100, 252, 223, 247, 5, 96, 151, 120, 164, 199, 139, 26, 36, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 };
        private static readonly byte[] so9 = { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 18, 0, 0, 0, 26, 8, 6, 0, 0, 0, 186, 157, 12, 58, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 32, 99, 72, 82, 77, 0, 0, 122, 38, 0, 0, 128, 132, 0, 0, 250, 0, 0, 0, 128, 232, 0, 0, 117, 48, 0, 0, 234, 96, 0, 0, 58, 152, 0, 0, 23, 112, 156, 186, 81, 60, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 10, 240, 0, 0, 10, 240, 1, 66, 172, 52, 152, 0, 0, 1, 210, 73, 68, 65, 84, 72, 75, 213, 148, 191, 75, 3, 65, 16, 133, 199, 46, 93, 176, 76, 123, 93, 16, 108, 82, 41, 136, 69, 20, 65, 235, 88, 164, 13, 248, 47, 68, 107, 45, 210, 104, 149, 38, 40, 136, 85, 64, 4, 21, 237, 162, 109, 170, 43, 68, 109, 13, 130, 141, 213, 105, 23, 208, 98, 220, 111, 119, 47, 63, 224, 238, 146, 64, 26, 133, 193, 75, 200, 124, 59, 239, 205, 219, 91, 80, 85, 153, 203, 31, 160, 121, 212, 92, 32, 86, 213, 44, 211, 24, 11, 54, 76, 181, 76, 117, 120, 30, 237, 157, 10, 100, 154, 42, 166, 34, 83, 24, 26, 215, 229, 76, 32, 15, 121, 3, 80, 44, 138, 30, 236, 139, 214, 106, 162, 185, 156, 68, 133, 130, 44, 198, 176, 204, 137, 188, 148, 104, 103, 91, 180, 215, 27, 254, 148, 231, 106, 85, 52, 8, 134, 242, 82, 65, 6, 18, 152, 10, 205, 169, 22, 114, 118, 42, 90, 175, 139, 134, 161, 107, 57, 58, 180, 18, 7, 242, 178, 64, 45, 32, 31, 239, 162, 143, 15, 162, 60, 27, 57, 122, 114, 236, 90, 46, 206, 45, 8, 223, 172, 188, 68, 80, 108, 110, 187, 45, 250, 253, 37, 90, 42, 217, 38, 235, 211, 237, 141, 107, 89, 93, 25, 124, 23, 100, 129, 58, 24, 251, 251, 227, 166, 49, 147, 132, 126, 237, 246, 115, 191, 47, 186, 91, 177, 32, 162, 144, 60, 81, 236, 13, 163, 143, 122, 65, 118, 48, 157, 239, 62, 63, 69, 243, 121, 11, 218, 75, 221, 26, 178, 204, 54, 162, 215, 23, 119, 242, 250, 154, 243, 98, 121, 73, 162, 231, 39, 7, 106, 54, 7, 254, 148, 178, 64, 141, 120, 83, 128, 200, 140, 1, 235, 245, 149, 51, 30, 185, 200, 30, 221, 88, 162, 71, 230, 7, 13, 78, 199, 11, 78, 199, 108, 138, 245, 243, 255, 254, 206, 133, 113, 226, 21, 65, 55, 250, 9, 92, 183, 235, 114, 67, 102, 152, 12, 48, 211, 49, 77, 108, 114, 150, 52, 130, 216, 34, 51, 172, 221, 55, 90, 131, 125, 118, 0, 141, 93, 216, 52, 105, 128, 184, 221, 246, 114, 2, 100, 42, 10, 239, 144, 158, 244, 198, 24, 11, 164, 95, 125, 199, 120, 164, 91, 155, 174, 240, 10, 137, 0, 147, 36, 37, 74, 99, 100, 164, 112, 58, 219, 137, 77, 246, 242, 8, 165, 77, 241, 52, 19, 181, 202, 101, 151, 19, 127, 187, 39, 78, 146, 54, 81, 131, 240, 33, 195, 75, 225, 126, 213, 179, 38, 73, 3, 97, 52, 141, 0, 7, 169, 157, 230, 117, 60, 213, 171, 246, 127, 130, 254, 0, 167, 99, 31, 169, 16, 77, 88, 82, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 };
        private static readonly byte[] so2 = { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 18, 0, 0, 0, 26, 8, 6, 0, 0, 0, 186, 157, 12, 58, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 32, 99, 72, 82, 77, 0, 0, 122, 38, 0, 0, 128, 132, 0, 0, 250, 0, 0, 0, 128, 232, 0, 0, 117, 48, 0, 0, 234, 96, 0, 0, 58, 152, 0, 0, 23, 112, 156, 186, 81, 60, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 10, 240, 0, 0, 10, 240, 1, 66, 172, 52, 152, 0, 0, 1, 209, 73, 68, 65, 84, 72, 75, 205, 148, 49, 72, 2, 97, 24, 134, 19, 68, 72, 16, 201, 64, 4, 7, 49, 42, 8, 55, 189, 65, 40, 194, 33, 5, 165, 33, 130, 196, 160, 33, 131, 4, 117, 104, 16, 81, 90, 164, 34, 146, 192, 33, 136, 40, 92, 131, 160, 154, 91, 194, 161, 169, 161, 131, 160, 45, 42, 104, 23, 220, 74, 72, 234, 237, 255, 126, 238, 63, 188, 243, 204, 32, 3, 133, 143, 59, 78, 125, 238, 125, 223, 239, 251, 126, 19, 128, 161, 190, 124, 8, 212, 143, 234, 11, 132, 187, 234, 135, 154, 255, 3, 177, 208, 3, 172, 10, 172, 174, 89, 81, 23, 68, 201, 236, 190, 204, 106, 164, 155, 3, 141, 53, 246, 195, 19, 29, 160, 29, 70, 247, 231, 172, 198, 140, 96, 42, 136, 222, 70, 111, 181, 184, 205, 8, 95, 249, 145, 125, 94, 64, 165, 153, 193, 193, 231, 6, 246, 27, 105, 196, 206, 164, 118, 117, 1, 61, 76, 175, 136, 108, 53, 22, 229, 25, 36, 228, 16, 124, 37, 47, 198, 211, 46, 100, 30, 230, 81, 253, 40, 34, 125, 27, 133, 201, 106, 226, 202, 122, 129, 40, 35, 217, 230, 27, 134, 51, 106, 135, 217, 193, 255, 196, 43, 247, 24, 199, 5, 246, 48, 93, 153, 18, 207, 52, 170, 58, 218, 79, 25, 40, 89, 136, 128, 121, 110, 4, 32, 16, 169, 82, 224, 133, 118, 85, 134, 115, 164, 228, 69, 153, 45, 137, 14, 198, 46, 37, 156, 98, 11, 201, 155, 176, 0, 149, 123, 130, 148, 253, 19, 202, 224, 73, 140, 98, 167, 190, 142, 195, 102, 22, 82, 105, 66, 128, 82, 61, 65, 138, 34, 110, 201, 238, 183, 242, 14, 30, 181, 114, 72, 212, 102, 69, 216, 100, 123, 238, 55, 32, 26, 190, 6, 129, 226, 119, 33, 62, 2, 201, 251, 8, 135, 42, 207, 53, 249, 24, 174, 8, 189, 137, 213, 11, 181, 57, 90, 147, 80, 70, 134, 67, 156, 33, 187, 154, 141, 209, 132, 27, 117, 141, 91, 242, 230, 93, 216, 124, 91, 65, 190, 158, 128, 35, 104, 211, 175, 139, 198, 86, 55, 69, 180, 6, 88, 126, 10, 113, 53, 210, 177, 26, 110, 59, 140, 108, 119, 15, 91, 132, 108, 15, 90, 177, 250, 26, 225, 217, 236, 182, 82, 216, 126, 95, 227, 87, 90, 153, 234, 87, 17, 147, 105, 183, 128, 170, 123, 103, 100, 141, 166, 187, 65, 59, 71, 64, 10, 152, 174, 100, 143, 138, 178, 178, 122, 44, 29, 211, 253, 211, 64, 246, 58, 9, 232, 123, 245, 88, 25, 240, 19, 242, 47, 231, 247, 224, 89, 251, 6, 80, 235, 33, 6, 158, 9, 41, 233, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 };
        private static readonly byte[] so7 = { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 18, 0, 0, 0, 26, 8, 6, 0, 0, 0, 186, 157, 12, 58, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 32, 99, 72, 82, 77, 0, 0, 122, 38, 0, 0, 128, 132, 0, 0, 250, 0, 0, 0, 128, 232, 0, 0, 117, 48, 0, 0, 234, 96, 0, 0, 58, 152, 0, 0, 23, 112, 156, 186, 81, 60, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 10, 240, 0, 0, 10, 240, 1, 66, 172, 52, 152, 0, 0, 1, 133, 73, 68, 65, 84, 72, 75, 213, 148, 205, 43, 133, 65, 20, 198, 143, 210, 173, 187, 176, 184, 119, 97, 67, 41, 69, 217, 216, 220, 146, 178, 19, 22, 246, 22, 150, 119, 115, 55, 150, 210, 205, 127, 32, 165, 100, 39, 236, 216, 224, 15, 16, 33, 69, 54, 175, 146, 178, 145, 155, 133, 157, 197, 101, 37, 54, 142, 243, 204, 204, 59, 247, 227, 189, 51, 70, 77, 202, 91, 167, 183, 249, 232, 55, 207, 121, 206, 153, 233, 98, 102, 138, 242, 1, 20, 35, 162, 64, 84, 86, 49, 212, 252, 13, 72, 10, 80, 146, 72, 36, 80, 13, 87, 212, 100, 109, 197, 169, 200, 64, 176, 201, 7, 73, 215, 106, 62, 208, 38, 32, 55, 27, 98, 97, 66, 252, 121, 77, 252, 113, 219, 26, 239, 247, 196, 171, 21, 125, 208, 143, 160, 242, 4, 241, 242, 44, 241, 146, 4, 254, 24, 31, 175, 17, 127, 61, 17, 95, 108, 19, 23, 123, 20, 40, 241, 129, 166, 100, 67, 38, 181, 153, 81, 173, 234, 114, 199, 166, 12, 15, 11, 62, 80, 193, 248, 4, 224, 62, 228, 207, 139, 154, 183, 43, 73, 119, 183, 5, 50, 152, 182, 143, 183, 143, 4, 80, 1, 100, 97, 90, 67, 218, 148, 148, 154, 123, 208, 9, 18, 64, 21, 16, 248, 2, 200, 249, 58, 113, 175, 241, 68, 230, 173, 18, 175, 34, 163, 164, 62, 57, 172, 43, 246, 112, 64, 156, 235, 214, 198, 166, 158, 180, 223, 136, 140, 162, 20, 50, 210, 71, 252, 122, 70, 252, 114, 74, 156, 207, 41, 8, 204, 207, 40, 233, 168, 72, 54, 194, 92, 30, 31, 104, 64, 0, 148, 185, 186, 196, 156, 239, 94, 90, 69, 56, 13, 210, 1, 121, 62, 212, 41, 161, 119, 66, 32, 182, 252, 200, 91, 162, 209, 205, 119, 196, 91, 101, 91, 230, 106, 200, 11, 161, 20, 65, 54, 78, 62, 90, 148, 161, 64, 30, 247, 164, 107, 243, 10, 116, 18, 2, 105, 86, 164, 64, 67, 69, 226, 177, 126, 11, 241, 154, 235, 172, 154, 233, 155, 244, 90, 32, 77, 103, 133, 58, 169, 252, 71, 47, 100, 168, 201, 65, 151, 246, 55, 176, 104, 30, 125, 3, 118, 213, 72, 17, 77, 19, 234, 73, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 };
        private static readonly byte[] cham = { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 9, 0, 0, 0, 26, 8, 6, 0, 0, 0, 101, 211, 118, 37, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 32, 99, 72, 82, 77, 0, 0, 122, 38, 0, 0, 128, 132, 0, 0, 250, 0, 0, 0, 128, 232, 0, 0, 117, 48, 0, 0, 234, 96, 0, 0, 58, 152, 0, 0, 23, 112, 156, 186, 81, 60, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 10, 240, 0, 0, 10, 240, 1, 66, 172, 52, 152, 0, 0, 0, 142, 73, 68, 65, 84, 56, 79, 99, 252, 255, 255, 63, 3, 65, 0, 82, 68, 8, 19, 84, 0, 182, 137, 144, 41, 35, 76, 17, 48, 228, 5, 129, 56, 13, 136, 87, 1, 241, 110, 32, 158, 9, 196, 74, 240, 112, 2, 114, 92, 128, 248, 29, 16, 131, 226, 9, 134, 239, 2, 217, 161, 96, 69, 80, 5, 119, 187, 187, 25, 254, 63, 121, 204, 240, 255, 211, 71, 134, 255, 73, 137, 112, 133, 16, 147, 128, 224, 140, 171, 19, 195, 255, 31, 223, 33, 6, 95, 189, 10, 87, 80, 14, 75, 0, 32, 107, 238, 202, 203, 48, 252, 55, 54, 134, 96, 168, 117, 171, 96, 81, 6, 50, 5, 228, 88, 144, 67, 65, 246, 131, 20, 128, 221, 129, 28, 167, 163, 17, 76, 239, 52, 14, 0, 66, 212, 83, 161, 96, 51, 14, 133, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 };
        private static readonly byte[] so6 = { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 18, 0, 0, 0, 26, 8, 6, 0, 0, 0, 186, 157, 12, 58, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 32, 99, 72, 82, 77, 0, 0, 122, 38, 0, 0, 128, 132, 0, 0, 250, 0, 0, 0, 128, 232, 0, 0, 117, 48, 0, 0, 234, 96, 0, 0, 58, 152, 0, 0, 23, 112, 156, 186, 81, 60, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 10, 240, 0, 0, 10, 240, 1, 66, 172, 52, 152, 0, 0, 1, 176, 73, 68, 65, 84, 72, 75, 237, 84, 45, 72, 4, 65, 24, 93, 141, 87, 196, 114, 96, 19, 193, 38, 92, 16, 44, 215, 142, 109, 150, 43, 134, 195, 102, 184, 34, 114, 81, 184, 120, 233, 48, 24, 108, 139, 216, 4, 97, 155, 96, 219, 108, 145, 205, 6, 97, 209, 100, 92, 196, 160, 7, 42, 227, 123, 223, 204, 172, 251, 55, 91, 92, 76, 30, 60, 134, 249, 123, 243, 222, 251, 190, 219, 37, 165, 148, 215, 202, 143, 68, 109, 160, 21, 18, 113, 213, 134, 154, 191, 37, 66, 33, 246, 128, 24, 96, 85, 242, 136, 48, 223, 176, 142, 156, 214, 120, 8, 224, 225, 50, 129, 157, 167, 216, 155, 55, 18, 225, 192, 182, 85, 49, 93, 195, 91, 151, 192, 163, 193, 51, 198, 216, 83, 131, 174, 60, 16, 57, 137, 242, 74, 22, 251, 184, 116, 11, 156, 121, 234, 97, 215, 83, 119, 190, 33, 61, 205, 84, 30, 215, 18, 25, 146, 144, 118, 62, 72, 114, 227, 169, 175, 137, 167, 122, 157, 31, 123, 35, 40, 220, 89, 145, 121, 0, 172, 186, 136, 198, 36, 73, 7, 32, 137, 128, 113, 109, 62, 146, 77, 158, 164, 80, 126, 110, 208, 115, 127, 25, 4, 23, 218, 206, 219, 129, 86, 37, 246, 48, 158, 111, 9, 113, 33, 228, 138, 34, 28, 240, 129, 228, 181, 111, 46, 83, 17, 178, 120, 63, 212, 163, 132, 13, 66, 83, 197, 164, 220, 200, 89, 249, 141, 103, 165, 166, 198, 22, 20, 133, 155, 250, 34, 51, 18, 85, 168, 216, 53, 30, 226, 131, 249, 30, 42, 91, 147, 166, 147, 82, 195, 198, 72, 7, 74, 27, 33, 3, 150, 204, 160, 42, 30, 202, 58, 207, 102, 205, 88, 38, 74, 37, 31, 102, 2, 53, 198, 2, 27, 50, 188, 234, 97, 237, 94, 247, 143, 89, 15, 154, 172, 41, 159, 22, 138, 68, 84, 148, 126, 206, 180, 154, 151, 163, 140, 200, 111, 34, 138, 165, 139, 67, 141, 137, 238, 92, 93, 57, 168, 33, 153, 85, 83, 46, 125, 102, 205, 148, 62, 232, 194, 218, 2, 25, 72, 30, 176, 97, 203, 254, 132, 181, 14, 246, 216, 30, 117, 36, 229, 140, 248, 255, 74, 214, 113, 129, 106, 78, 160, 110, 6, 12, 141, 50, 102, 229, 34, 169, 124, 143, 112, 144, 100, 188, 192, 108, 108, 213, 168, 162, 146, 137, 51, 163, 223, 126, 41, 179, 134, 252, 39, 114, 70, 241, 13, 39, 110, 45, 166, 236, 192, 14, 119, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 };
        private static readonly byte[] so3 = { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 18, 0, 0, 0, 26, 8, 6, 0, 0, 0, 186, 157, 12, 58, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 32, 99, 72, 82, 77, 0, 0, 122, 38, 0, 0, 128, 132, 0, 0, 250, 0, 0, 0, 128, 232, 0, 0, 117, 48, 0, 0, 234, 96, 0, 0, 58, 152, 0, 0, 23, 112, 156, 186, 81, 60, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 10, 240, 0, 0, 10, 240, 1, 66, 172, 52, 152, 0, 0, 1, 204, 73, 68, 65, 84, 72, 75, 205, 148, 49, 72, 66, 81, 20, 134, 11, 34, 80, 104, 208, 32, 2, 135, 72, 170, 37, 72, 200, 8, 167, 136, 144, 192, 134, 104, 200, 33, 40, 112, 73, 168, 32, 90, 66, 132, 160, 33, 226, 57, 56, 181, 20, 212, 18, 6, 129, 21, 72, 65, 8, 66, 34, 225, 246, 134, 134, 28, 132, 28, 147, 32, 104, 8, 2, 131, 234, 244, 254, 203, 189, 143, 247, 158, 79, 95, 224, 19, 18, 206, 162, 215, 239, 158, 255, 63, 255, 185, 157, 68, 212, 97, 203, 7, 32, 59, 202, 22, 8, 83, 101, 71, 55, 237, 3, 41, 166, 123, 149, 74, 43, 133, 9, 104, 171, 194, 191, 247, 55, 82, 160, 147, 166, 28, 142, 42, 245, 102, 2, 210, 66, 195, 102, 48, 35, 40, 6, 200, 65, 110, 131, 42, 63, 89, 122, 170, 221, 178, 42, 127, 220, 208, 69, 113, 151, 70, 3, 30, 0, 209, 93, 208, 8, 51, 130, 194, 221, 142, 46, 138, 72, 51, 148, 41, 73, 52, 27, 241, 209, 82, 124, 138, 206, 139, 59, 244, 66, 247, 84, 40, 31, 137, 206, 210, 77, 65, 60, 156, 178, 211, 237, 160, 161, 137, 126, 85, 78, 175, 167, 135, 228, 215, 51, 170, 126, 22, 104, 124, 122, 80, 116, 229, 210, 194, 234, 198, 223, 200, 112, 185, 154, 162, 231, 175, 60, 141, 248, 84, 121, 150, 32, 191, 2, 147, 181, 134, 199, 143, 23, 153, 87, 169, 124, 156, 220, 125, 78, 116, 132, 223, 45, 65, 97, 64, 182, 78, 22, 232, 225, 61, 205, 36, 9, 179, 225, 31, 159, 106, 244, 47, 30, 185, 112, 24, 30, 237, 93, 46, 83, 242, 122, 85, 133, 173, 239, 135, 132, 111, 49, 75, 16, 55, 28, 242, 48, 102, 246, 71, 140, 29, 30, 65, 94, 32, 52, 44, 204, 246, 54, 53, 155, 131, 144, 240, 32, 55, 62, 129, 14, 15, 179, 155, 44, 2, 210, 233, 138, 232, 74, 151, 37, 99, 142, 32, 11, 43, 130, 110, 96, 104, 78, 24, 15, 163, 1, 210, 200, 211, 173, 139, 17, 4, 73, 52, 54, 55, 64, 243, 219, 147, 106, 142, 16, 80, 200, 130, 60, 158, 110, 172, 81, 83, 16, 219, 181, 228, 221, 26, 149, 190, 51, 244, 88, 187, 98, 19, 195, 244, 144, 110, 30, 70, 92, 144, 176, 90, 17, 120, 147, 19, 201, 198, 237, 40, 76, 16, 233, 230, 230, 67, 186, 46, 67, 166, 239, 17, 14, 225, 70, 158, 23, 237, 214, 195, 51, 116, 92, 7, 105, 223, 195, 214, 202, 179, 251, 207, 223, 236, 86, 164, 253, 2, 132, 243, 62, 40, 46, 97, 187, 116, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 };
        private static readonly byte[] so8 = { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 18, 0, 0, 0, 26, 8, 6, 0, 0, 0, 186, 157, 12, 58, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 32, 99, 72, 82, 77, 0, 0, 122, 38, 0, 0, 128, 132, 0, 0, 250, 0, 0, 0, 128, 232, 0, 0, 117, 48, 0, 0, 234, 96, 0, 0, 58, 152, 0, 0, 23, 112, 156, 186, 81, 60, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 10, 240, 0, 0, 10, 240, 1, 66, 172, 52, 152, 0, 0, 2, 1, 73, 68, 65, 84, 72, 75, 173, 149, 61, 72, 3, 65, 16, 133, 71, 16, 211, 137, 130, 22, 193, 70, 211, 8, 130, 133, 92, 21, 210, 40, 68, 176, 85, 9, 118, 22, 22, 129, 96, 43, 136, 216, 216, 8, 17, 108, 132, 88, 4, 11, 43, 65, 98, 173, 136, 105, 196, 38, 32, 65, 80, 44, 226, 207, 129, 54, 166, 16, 15, 33, 72, 58, 199, 121, 183, 155, 197, 75, 114, 119, 9, 36, 48, 28, 225, 118, 191, 125, 243, 102, 118, 174, 143, 153, 169, 39, 63, 128, 122, 17, 61, 129, 184, 89, 117, 163, 70, 44, 72, 74, 164, 36, 134, 155, 247, 133, 130, 244, 230, 130, 60, 97, 166, 35, 97, 75, 100, 37, 98, 255, 97, 129, 32, 89, 156, 215, 0, 64, 120, 102, 154, 120, 116, 196, 0, 83, 161, 32, 72, 215, 167, 186, 155, 143, 14, 137, 223, 108, 226, 122, 141, 120, 127, 215, 192, 160, 202, 164, 216, 86, 145, 246, 129, 151, 23, 137, 127, 28, 226, 167, 123, 226, 215, 138, 90, 10, 160, 101, 185, 170, 178, 129, 138, 144, 187, 68, 121, 106, 146, 184, 90, 85, 106, 160, 10, 80, 128, 74, 215, 196, 67, 131, 46, 40, 56, 53, 89, 144, 30, 232, 39, 62, 59, 33, 254, 124, 39, 142, 68, 220, 77, 156, 73, 43, 208, 122, 198, 253, 15, 195, 61, 149, 243, 164, 166, 189, 201, 39, 226, 196, 191, 117, 117, 250, 196, 184, 10, 164, 132, 244, 196, 108, 84, 46, 29, 88, 254, 70, 90, 219, 27, 138, 15, 69, 59, 91, 74, 29, 32, 56, 64, 171, 177, 194, 64, 150, 44, 44, 46, 36, 21, 4, 176, 239, 47, 245, 172, 60, 18, 195, 55, 157, 106, 186, 147, 212, 138, 240, 164, 112, 172, 210, 107, 4, 96, 151, 231, 166, 98, 133, 48, 69, 168, 152, 61, 155, 80, 138, 14, 246, 148, 185, 87, 2, 0, 8, 85, 196, 59, 89, 19, 10, 202, 162, 98, 207, 119, 166, 204, 142, 164, 82, 142, 70, 85, 138, 104, 72, 188, 23, 208, 166, 175, 34, 93, 49, 103, 101, 201, 83, 230, 178, 54, 215, 5, 229, 114, 230, 122, 248, 155, 141, 6, 147, 211, 156, 135, 18, 113, 237, 195, 84, 200, 65, 243, 221, 222, 168, 242, 67, 25, 238, 95, 187, 137, 97, 250, 8, 189, 17, 151, 214, 175, 190, 40, 131, 113, 167, 80, 110, 24, 140, 210, 207, 207, 185, 16, 40, 108, 25, 33, 158, 121, 132, 30, 194, 205, 190, 56, 85, 32, 152, 139, 123, 134, 30, 194, 1, 242, 30, 141, 152, 244, 155, 95, 205, 157, 109, 199, 198, 136, 209, 144, 107, 171, 158, 190, 65, 75, 180, 248, 226, 123, 105, 245, 173, 135, 252, 70, 117, 160, 162, 101, 136, 5, 122, 164, 191, 38, 152, 67, 232, 110, 108, 246, 77, 35, 20, 212, 205, 252, 238, 122, 102, 119, 10, 15, 29, 254, 157, 130, 254, 0, 59, 6, 28, 140, 232, 11, 89, 119, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 };
        private static readonly byte[] so0 = { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 18, 0, 0, 0, 26, 8, 6, 0, 0, 0, 186, 157, 12, 58, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 32, 99, 72, 82, 77, 0, 0, 122, 38, 0, 0, 128, 132, 0, 0, 250, 0, 0, 0, 128, 232, 0, 0, 117, 48, 0, 0, 234, 96, 0, 0, 58, 152, 0, 0, 23, 112, 156, 186, 81, 60, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 10, 240, 0, 0, 10, 240, 1, 66, 172, 52, 152, 0, 0, 2, 75, 73, 68, 65, 84, 72, 75, 189, 85, 61, 76, 83, 81, 24, 165, 218, 22, 68, 40, 96, 77, 176, 77, 40, 60, 138, 141, 80, 18, 170, 15, 141, 104, 20, 11, 36, 4, 249, 25, 196, 58, 232, 198, 208, 9, 22, 7, 187, 24, 19, 19, 77, 24, 220, 156, 186, 73, 72, 72, 96, 49, 97, 50, 233, 98, 226, 250, 18, 29, 28, 76, 76, 93, 197, 165, 131, 75, 199, 227, 61, 31, 247, 66, 223, 163, 63, 111, 104, 108, 242, 13, 237, 125, 247, 124, 231, 156, 239, 188, 175, 1, 0, 29, 109, 249, 16, 168, 29, 213, 22, 16, 81, 213, 140, 141, 146, 60, 202, 242, 195, 184, 46, 144, 186, 60, 160, 42, 175, 170, 164, 170, 172, 234, 64, 149, 221, 180, 169, 247, 80, 131, 20, 52, 0, 39, 81, 91, 69, 158, 215, 3, 60, 195, 72, 61, 152, 19, 144, 206, 14, 92, 202, 70, 144, 222, 183, 48, 245, 54, 5, 126, 215, 160, 219, 45, 129, 52, 155, 34, 47, 69, 243, 61, 152, 251, 102, 99, 173, 122, 31, 203, 71, 119, 241, 164, 58, 143, 196, 230, 160, 1, 204, 157, 81, 82, 251, 131, 54, 183, 212, 125, 171, 11, 51, 95, 211, 114, 217, 254, 60, 142, 158, 108, 23, 198, 62, 36, 144, 195, 2, 250, 31, 94, 36, 51, 167, 21, 144, 77, 89, 209, 173, 136, 92, 122, 240, 235, 6, 250, 214, 123, 121, 177, 18, 202, 4, 177, 246, 123, 22, 119, 62, 77, 26, 137, 46, 243, 93, 30, 209, 159, 64, 127, 160, 98, 189, 177, 176, 129, 85, 76, 127, 185, 106, 164, 112, 106, 152, 218, 77, 138, 212, 112, 44, 68, 48, 151, 87, 94, 160, 2, 129, 110, 126, 28, 199, 51, 44, 193, 122, 25, 23, 54, 170, 100, 138, 195, 175, 99, 242, 123, 252, 249, 101, 54, 40, 185, 108, 241, 120, 84, 96, 55, 74, 122, 92, 157, 67, 223, 83, 241, 131, 57, 226, 36, 29, 2, 19, 104, 228, 189, 52, 112, 106, 195, 234, 101, 196, 16, 98, 241, 231, 109, 172, 255, 205, 26, 32, 102, 39, 175, 24, 84, 146, 59, 67, 2, 148, 122, 55, 68, 70, 100, 122, 226, 147, 23, 200, 86, 210, 100, 236, 52, 59, 156, 8, 178, 51, 101, 109, 159, 191, 114, 174, 146, 57, 76, 157, 50, 234, 20, 166, 13, 129, 6, 84, 167, 114, 250, 208, 18, 105, 234, 50, 129, 248, 154, 72, 182, 76, 3, 122, 165, 165, 213, 7, 210, 187, 169, 72, 111, 56, 181, 216, 43, 101, 234, 177, 217, 78, 116, 57, 34, 19, 99, 4, 100, 106, 202, 236, 134, 30, 105, 160, 99, 121, 223, 175, 99, 230, 71, 70, 50, 67, 137, 147, 123, 163, 34, 139, 57, 226, 57, 89, 54, 156, 154, 57, 160, 28, 38, 248, 209, 159, 121, 172, 56, 247, 36, 63, 244, 140, 108, 122, 23, 46, 16, 136, 44, 243, 126, 128, 184, 135, 202, 225, 137, 32, 50, 197, 107, 242, 174, 145, 221, 240, 139, 184, 97, 227, 26, 125, 211, 197, 166, 179, 35, 201, 14, 38, 67, 242, 190, 233, 13, 64, 54, 204, 149, 107, 157, 248, 217, 144, 204, 145, 9, 38, 13, 46, 180, 92, 35, 141, 54, 32, 167, 99, 88, 120, 153, 156, 248, 234, 103, 31, 251, 121, 230, 255, 252, 139, 248, 97, 98, 158, 249, 7, 120, 204, 231, 191, 32, 138, 65, 222, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 };
        //private static readonly byte[] so5 = { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 18, 0, 0, 0, 26, 8, 6, 0, 0, 0, 186, 157, 12, 58, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 32, 99, 72, 82, 77, 0, 0, 122, 38, 0, 0, 128, 132, 0, 0, 250, 0, 0, 0, 128, 232, 0, 0, 117, 48, 0, 0, 234, 96, 0, 0, 58, 152, 0, 0, 23, 112, 156, 186, 81, 60, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 10, 240, 0, 0, 10, 240, 1, 66, 172, 52, 152, 0, 0, 1, 59, 73, 68, 65, 84, 72, 75, 213, 148, 189, 17, 130, 64, 16, 133, 181, 4, 90, 176, 5, 11, 32, 177, 5, 50, 98, 91, 160, 0, 19, 19, 11, 176, 5, 74, 144, 22, 200, 140, 201, 141, 24, 59, 56, 223, 187, 91, 96, 15, 56, 65, 231, 198, 25, 157, 121, 51, 254, 224, 119, 251, 246, 237, 222, 214, 24, 179, 137, 242, 34, 40, 134, 162, 64, 172, 171, 24, 213, 252, 6, 132, 0, 10, 168, 130, 152, 198, 88, 252, 126, 167, 221, 204, 90, 195, 67, 71, 168, 13, 64, 58, 104, 181, 6, 84, 18, 98, 91, 72, 37, 80, 10, 229, 208, 201, 125, 150, 131, 246, 29, 44, 84, 81, 227, 129, 52, 16, 144, 167, 179, 218, 188, 173, 136, 222, 121, 90, 95, 205, 124, 143, 120, 208, 97, 9, 148, 141, 171, 145, 94, 209, 46, 127, 59, 64, 189, 165, 160, 53, 60, 116, 213, 32, 213, 112, 86, 81, 134, 230, 110, 210, 163, 46, 114, 109, 205, 54, 219, 53, 152, 98, 101, 201, 24, 56, 7, 242, 19, 211, 169, 13, 105, 101, 107, 64, 108, 118, 63, 136, 105, 151, 152, 196, 47, 85, 157, 215, 130, 246, 146, 30, 7, 211, 205, 146, 15, 186, 190, 5, 225, 79, 103, 206, 7, 84, 75, 85, 117, 174, 65, 128, 201, 32, 22, 65, 144, 84, 80, 155, 36, 181, 21, 36, 50, 63, 253, 100, 15, 205, 230, 33, 222, 158, 121, 219, 47, 51, 210, 154, 252, 2, 27, 72, 89, 175, 8, 222, 223, 29, 152, 251, 55, 105, 244, 24, 196, 190, 52, 15, 38, 107, 53, 236, 218, 109, 1, 50, 185, 143, 56, 177, 50, 39, 250, 218, 96, 130, 188, 82, 38, 118, 22, 183, 255, 155, 91, 243, 143, 174, 218, 79, 237, 69, 179, 246, 2, 170, 139, 41, 77, 79, 108, 194, 214, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 };
        private static readonly byte[] so5 = { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 16, 0, 0, 0, 26, 8, 6, 0, 0, 0, 190, 104, 220, 7, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 32, 99, 72, 82, 77, 0, 0, 122, 38, 0, 0, 128, 132, 0, 0, 250, 0, 0, 0, 128, 232, 0, 0, 117, 48, 0, 0, 234, 96, 0, 0, 58, 152, 0, 0, 23, 112, 156, 186, 81, 60, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 11, 18, 0, 0, 11, 18, 1, 210, 221, 126, 252, 0, 0, 1, 194, 73, 68, 65, 84, 56, 79, 197, 84, 61, 72, 66, 81, 24, 173, 173, 41, 170, 33, 164, 65, 226, 209, 20, 17, 130, 18, 14, 17, 133, 54, 68, 67, 14, 26, 210, 18, 61, 36, 132, 112, 177, 193, 241, 65, 67, 80, 139, 163, 67, 13, 253, 108, 162, 4, 209, 16, 216, 43, 104, 104, 73, 218, 10, 23, 135, 182, 122, 67, 56, 52, 4, 111, 56, 221, 239, 246, 238, 227, 62, 189, 90, 241, 136, 132, 15, 31, 151, 123, 206, 61, 231, 124, 223, 189, 253, 0, 250, 124, 253, 136, 192, 79, 249, 2, 115, 245, 126, 78, 255, 150, 128, 101, 19, 102, 21, 103, 85, 144, 42, 44, 31, 170, 84, 224, 0, 235, 236, 159, 18, 86, 85, 77, 144, 116, 35, 224, 96, 125, 126, 20, 198, 74, 0, 102, 62, 10, 179, 56, 7, 115, 119, 17, 49, 109, 72, 16, 106, 74, 11, 12, 152, 226, 96, 6, 68, 115, 11, 120, 92, 67, 171, 186, 14, 235, 150, 213, 101, 22, 165, 213, 144, 32, 72, 117, 16, 48, 160, 38, 36, 55, 110, 150, 96, 63, 101, 160, 207, 142, 168, 44, 188, 177, 125, 195, 42, 130, 50, 17, 84, 142, 150, 97, 91, 57, 110, 65, 202, 160, 198, 190, 169, 40, 80, 14, 246, 16, 56, 193, 65, 27, 27, 132, 253, 126, 128, 250, 249, 2, 204, 253, 8, 204, 157, 73, 217, 119, 185, 189, 237, 110, 136, 14, 51, 204, 227, 12, 240, 113, 194, 21, 88, 102, 2, 246, 67, 18, 246, 117, 142, 17, 15, 8, 53, 238, 233, 237, 10, 54, 73, 46, 41, 32, 11, 66, 122, 105, 35, 8, 220, 109, 195, 72, 79, 136, 181, 120, 199, 28, 176, 205, 220, 187, 170, 4, 65, 108, 218, 13, 147, 183, 207, 205, 64, 246, 254, 124, 95, 100, 237, 155, 18, 68, 77, 34, 108, 28, 70, 97, 157, 166, 197, 154, 59, 64, 50, 1, 165, 250, 229, 189, 117, 229, 81, 97, 36, 131, 60, 3, 61, 18, 16, 235, 133, 142, 16, 61, 225, 49, 130, 216, 76, 144, 111, 54, 178, 227, 124, 14, 42, 121, 215, 123, 93, 117, 241, 232, 45, 161, 11, 195, 129, 182, 117, 1, 251, 245, 12, 173, 151, 61, 222, 5, 82, 32, 229, 226, 241, 238, 153, 3, 103, 64, 160, 39, 66, 220, 10, 117, 65, 106, 27, 101, 161, 4, 187, 109, 116, 70, 88, 117, 251, 168, 59, 93, 193, 170, 81, 38, 59, 20, 42, 205, 68, 79, 96, 207, 235, 252, 155, 87, 234, 111, 159, 180, 159, 40, 249, 127, 5, 159, 96, 240, 163, 241, 22, 32, 73, 55, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 };


        public static bool Init()
        {
            bool result;
            try
            {
                WindMgr.m_lock = new ReaderWriterLock();
                WindMgr._winds = new Dictionary<int, WindInfo>();
                WindMgr.rand = new ThreadSafeRandom();
                result = WindMgr.LoadWinds(WindMgr._winds);
            }
            catch (Exception exception)
            {
                if (WindMgr.log.IsErrorEnabled)
                {
                    WindMgr.log.Error("WindInfoMgr", exception);
                }
                result = false;
            }
            return result;
        }
        public static bool ReLoad()
        {
            try
            {
                Dictionary<int, WindInfo> winds = new Dictionary<int, WindInfo>();
                if (WindMgr.LoadWinds(winds))
                {
                    WindMgr.m_lock.AcquireWriterLock(-1);
                    try
                    {
                        WindMgr._winds = winds;
                        return true;
                    }
                    catch
                    {
                    }
                    finally
                    {
                        WindMgr.m_lock.ReleaseWriterLock();
                    }
                }
            }
            catch (Exception exception)
            {
                if (WindMgr.log.IsErrorEnabled)
                {
                    WindMgr.log.Error("WindMgr", exception);
                }
            }
            return false;
        }
        public static byte[] ReadImageFile(string imageLocation)
        {
            FileInfo fileInfo = new FileInfo(imageLocation);
            long length = fileInfo.Length;
            FileStream input = new FileStream(imageLocation, FileMode.Open, FileAccess.Read);
            BinaryReader binaryReader = new BinaryReader(input);
            return binaryReader.ReadBytes((int)length);
        }
        public static bool isSmall(string wind)
        {
            return wind == WindMgr.fontWind[0] || wind == WindMgr.fontWind[1];
        }
        public static byte[] CreateVane(string wind)
        {
            switch (wind)
            {
                case "0":
                    return WindMgr.so0;

                case "1":
                    return WindMgr.so1;

                case "2":
                    return WindMgr.so2;

                case "3":
                    return WindMgr.so3;

                case "4":
                    return WindMgr.so4;

                case "5":
                    return WindMgr.so5;

                case "6":
                    return WindMgr.so6;

                case "7":
                    return WindMgr.so7;

                case "8":
                    return WindMgr.so8;

                case "9":
                    return WindMgr.so9;
            }
            return WindMgr.cham;
        }
        private static bool LoadWinds(Dictionary<int, WindInfo> Winds)
        {
            int[] windID = WindMgr.WindID;
            for (int i = 0; i < windID.Length; i++)
            {
                int num = windID[i];
                WindInfo windInfo = new WindInfo();
                byte[] array = WindMgr.CreateVane(WindMgr.fontWind[num]);
                if (array == null || array.Length <= 0)
                {
                    if (WindMgr.log.IsErrorEnabled)
                    {
                        WindMgr.log.Error("Load Wind Error!");
                    }
                    return false;
                }
                windInfo.WindID = num;
                windInfo.WindPic = array;
                if (!Winds.ContainsKey(num))
                {
                    Winds.Add(num, windInfo);
                }
            }
            return true;
        }
        public static List<WindInfo> GetWind()
        {
            WindMgr.m_lock.AcquireReaderLock(-1);
            try
            {
                List<WindInfo> list = new List<WindInfo>();
                for (int i = 0; i < WindMgr._winds.Values.Count; i++)
                {
                    list.Add(WindMgr._winds[i]);
                }
                if (list.Count > 0)
                {
                    return list;
                }
            }
            catch
            {
            }
            finally
            {
                WindMgr.m_lock.ReleaseReaderLock();
            }
            return null;
        }
        public static WindInfo FindWind(int ID)
        {
            WindMgr.m_lock.AcquireReaderLock(-1);
            try
            {
                if (WindMgr._winds.ContainsKey(ID))
                {
                    return WindMgr._winds[ID];
                }
            }
            catch
            {
            }
            finally
            {
                WindMgr.m_lock.ReleaseReaderLock();
            }
            return null;
        }
        public static byte GetWindID(int wind, int pos)
        {
            //Console.WriteLine("___________________Loi Cpu_________________");
            if (wind < 10)
            {
                switch (pos)
                {
                    case 1:
                        return 10;

                    case 3:
                        return (byte)((wind == 0) ? 10 : wind);
                }
            }
            if (wind >= 10 && wind < 20)
            {
                switch (pos)
                {
                    case 1:
                        return 1;

                    case 3:
                        return (byte)((wind - 10 == 0) ? 10 : (wind - 10));
                }
            }
            if (wind >= 20 && wind < 30)
            {
                switch (pos)
                {
                    case 1:
                        return 2;

                    case 3:
                        return (byte)((wind - 20 == 0) ? 10 : (wind - 20));
                }
            }
            if (wind >= 30 && wind < 40)
            {
                switch (pos)
                {
                    case 1:
                        return 3;

                    case 3:
                        return (byte)((wind - 30 == 0) ? 10 : (wind - 30));
                }
            }
            if (wind >= 40 && wind < 50)
            {
                switch (pos)
                {
                    case 1:
                        return 4;

                    case 3:
                        return (byte)((wind - 40 == 0) ? 10 : (wind - 40));
                }
            }
            return 0;
        }
    }
}
